import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test

class MazeTests {

    @Test
    fun `small example maze using portals`() {
        // Arrange
        val maze = """
                 A           
                 A           
          #######.#########  
          #######.........#  
          #######.#######.#  
          #######.#######.#  
          #######.#######.#  
          #####  B    ###.#  
        BC...##  C    ###.#  
          ##.##       ###.#  
          ##...DE  F  ###.#  
          #####    G  ###.#  
          #########.#####.#  
        DE..#######...###.#  
          #.#########.###.#  
        FG..#########.....#  
          ###########.#####  
                     Z       
                     Z       
        """.trimIndent().split('\n')

        // Act
        val pathLength = shortestPortalPathLength(maze)

        // Assert
        assertEquals(23, pathLength)
    }

    @Test
    fun `medium example maze using portals`() {
        // Arrange
        val maze = """
                           A               
                           A               
          #################.#############  
          #.#...#...................#.#.#  
          #.#.#.###.###.###.#########.#.#  
          #.#.#.......#...#.....#.#.#...#  
          #.#########.###.#####.#.#.###.#  
          #.............#.#.....#.......#  
          ###.###########.###.#####.#.#.#  
          #.....#        A   C    #.#.#.#  
          #######        S   P    #####.#  
          #.#...#                 #......VT
          #.#.#.#                 #.#####  
          #...#.#               YN....#.#  
          #.###.#                 #####.#  
        DI....#.#                 #.....#  
          #####.#                 #.###.#  
        ZZ......#               QG....#..AS
          ###.###                 #######  
        JO..#.#.#                 #.....#  
          #.#.#.#                 ###.#.#  
          #...#..DI             BU....#..LF
          #####.#                 #.#####  
        YN......#               VT..#....QG
          #.###.#                 #.###.#  
          #.#...#                 #.....#  
          ###.###    J L     J    #.#.###  
          #.....#    O F     P    #.#...#  
          #.###.#####.#.#####.#####.###.#  
          #...#.#.#...#.....#.....#.#...#  
          #.#####.###.###.#.#.#########.#  
          #...#.#.....#...#.#.#.#.....#.#  
          #.###.#####.###.###.#.#.#######  
          #.#.........#...#.............#  
          #########.###.###.#############  
                   B   J   C               
                   U   P   P               
        """.trimIndent().split('\n')

        // Act
        val pathLength = shortestPortalPathLength(maze)

        // Assert
        assertEquals(58, pathLength)
    }

    @Test
    fun `small example maze using recursion`() {
        // Arrange
        val maze = """
                 A           
                 A           
          #######.#########  
          #######.........#  
          #######.#######.#  
          #######.#######.#  
          #######.#######.#  
          #####  B    ###.#  
        BC...##  C    ###.#  
          ##.##       ###.#  
          ##...DE  F  ###.#  
          #####    G  ###.#  
          #########.#####.#  
        DE..#######...###.#  
          #.#########.###.#  
        FG..#########.....#  
          ###########.#####  
                     Z       
                     Z       
        """.trimIndent().split('\n')

        // Act
        val pathLength = shortestRecursivePathLength(maze)

        // Assert
        assertEquals(26, pathLength)
    }

    @Test
    fun `large example maze using recursion`() {
        // Arrange
        val maze = """
                     Z L X W       C                 
                     Z P Q B       K                 
          ###########.#.#.#.#######.###############  
          #...#.......#.#.......#.#.......#.#.#...#  
          ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  
          #.#...#.#.#...#.#.#...#...#...#.#.......#  
          #.###.#######.###.###.#.###.###.#.#######  
          #...#.......#.#...#...#.............#...#  
          #.#########.#######.#.#######.#######.###  
          #...#.#    F       R I       Z    #.#.#.#  
          #.###.#    D       E C       H    #.#.#.#  
          #.#...#                           #...#.#  
          #.###.#                           #.###.#  
          #.#....OA                       WB..#.#..ZH
          #.###.#                           #.#.#.#  
        CJ......#                           #.....#  
          #######                           #######  
          #.#....CK                         #......IC
          #.###.#                           #.###.#  
          #.....#                           #...#.#  
          ###.###                           #.#.#.#  
        XF....#.#                         RF..#.#.#  
          #####.#                           #######  
          #......CJ                       NM..#...#  
          ###.#.#                           #.###.#  
        RE....#.#                           #......RF
          ###.###        X   X       L      #.#.#.#  
          #.....#        F   Q       P      #.#.#.#  
          ###.###########.###.#######.#########.###  
          #.....#...#.....#.......#...#.....#.#...#  
          #####.#.###.#######.#######.###.###.#.#.#  
          #.......#.......#.#.#.#.#...#...#...#.#.#  
          #####.###.#####.#.#.#.#.###.###.#.###.###  
          #.......#.....#.#...#...............#...#  
          #############.#.#.###.###################  
                       A O F   N                     
                       A A D   M                     
        """.trimIndent().split('\n')

        // Act
        val pathLength = shortestRecursivePathLength(maze)

        // Assert
        assertEquals(396, pathLength)
    }

}
